# NOTE:
# All variables are here:
# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: <:ROOT_NAME:>-<:PKG_NAME:>
# TODO: https://github.com/ServerlessOpsIO/serverless-zombo.com/blob/master/serverless.yml

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'production'}
  # AWS profile to use when deploying
  profile: ${env:SERVERLESS__PROFILE, ""}
  # AWS region to deploy into
  region: us-east-1
  # Optional function versioning
  versionFunctions: false
  # Set the default RetentionInDays for a CloudWatch LogGroup
  logRetentionInDays: 7
  deploymentBucket:
    # Deployment bucket name. Default is generated by the framework
    name: stellar-serverless-deploys
    serverSideEncryption: AES256
  # The S3 prefix under which deployed artifacts should be stored
  deploymentPrefix: artifacts
  # Use a custom name for the API Gateway API
  apiName: ${self:service}-${self:provider.stage}
  apiGateway:
    # Compress response when larger than specified size in bytes (must be between 0 and 10485760)
    minimumCompressionSize: 2048
  # Optional endpoint configuration for API Gateway REST API. Other option is 'edge'
  endpointType: regional
  # IAM role statements so that services can be accessed in the AWS account
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudformation:DescribeStackResourc
      Resource: "*"

resources:
  Resources:
    # Creates a static site bucket named after the domain name
    StaticSiteS3Bucket:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      Properties:
        AccessControl: PublicRead
        BucketName: ${env:SERVERLESS__SITE_S3_BUCKET, ""}
        WebsiteConfiguration:
          IndexDocument: index.html
    # Creates a bucket policy for the static site bucket
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn:
        - StaticSiteS3Bucket
      Properties:
        Bucket:
          Ref: StaticSiteS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: ["", ["arn:aws:s3:::", {"Ref": "StaticSiteS3Bucket"}, "/*"]]
    # Creates a bucket for public assets
    # Comment out if using a shared or existing bucket
    ClientS3Bucket:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      Properties:
        AccessControl: Private
        BucketName: ${env:SERVERLESS__CLIENT_S3_BUCKET, ""}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - ${env:DOMAIN, ""}
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
    # Sets up the CloudFront custom certificate
    # StaticSiteCert:
    #   Type: AWS::CertificateManager::Certificate
    #   Properties:
    #     DomainName: ${env:DOMAIN}
    #     DomainValidationOptions:
    #       - DomainName: ${env:DOMAIN}
    #         ValidationDomain: ${env:DOMAIN}
    # Sets up the CloudFront distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - StaticSiteS3BucketPolicy
        # - StaticSiteCert
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - StaticSiteS3Bucket
                  - DomainName
              Id:
                Ref: StaticSiteS3Bucket
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginSSLProtocols:
                  - TLSv1.1
                  - TLSv1
                OriginProtocolPolicy: http-only
          Enabled: 'true'
          HttpVersion: http2
          PriceClass: PriceClass_100  # US, CAN, EU
          Aliases:
            - ${env:DOMAIN, ""}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId:
              Ref: StaticSiteS3Bucket
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ''
              # Ref: StaticSiteCert
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
    # Sets up Route 53 for the S3 static site
    CloudFrontDnsRecord:
      Type: AWS::Route53::RecordSet
      DependsOn:
        CloudFrontDistribution
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2  # us-east-1
        HostedZoneName: ${env:SERVERLESS__HOSTED_ZONE, ""}
        Name: ${env:DOMAIN, ""}.
        Type: 'A'
    # Redirects WWW to naked domain
    # StaticRedirectS3Bucket:
    #   Type: AWS::S3::Bucket
    #   # DeletionPolicy: Retain
    #   Properties:
    #     AccessControl: PublicRead
    #     BucketName: www.<:DOMAIN:>
    #     WebsiteConfiguration:
    #       HttpRedirectCode: 301
    #       Protocol: https
    #       HostName: <:DOMAIN:>
    # Redirect DNS record
    # StaticRedirectDnsRecord:
    #   Type: AWS::Route53::RecordSet
    #   DependsOn:
    #     - StaticRedirectS3Bucket
    #   Properties:
    #     AliasTarget:
    #       DNSName: s3-website-us-east-1.amazonaws.com. # us-east-1
    #       HostedZoneId: Z2FDTNDATAQYW2                 # us-east-1
    #     HostedZoneName: ${env:SERVERLESS__HOSTED_ZONE, ""}
    #     Name:
    #       Ref: StaticRedirectS3Bucket
    #     Type: 'A'

plugins:
  # Loads environment variables defined in .env.[--stage]
  - '@stellar-apps/serverless-dotenv'
  # Creates ACM certificates for the app domains
  - '@stellar-apps/serverless-certificate-manager'
  # Runs the static site webpack bundler
  # - serverless-plugin-scripts
  # Deploys Webpack bundles to S3
  - '@stellar-apps/serverless-sync-bundle'

custom:
  # Environment variables
  dotenv:
    exclude:
      - 'SERVERLESS__*'
  # Creates ACM certificates for the app domains
  certificateManager:
    refFor:
      - resources.Resources.CloudFrontDistribution.Properties.ViewerCertificate.AcmCertificateArn
    domains:
      - <:DOMAIN:>
      - '*.<:DOMAIN:>'
  # Defines settings for client-side bundle objects and the S3 bucket
  syncBundle:
    'webpack/client.config.js':
      bucket:
        name: ${env:SERVERLESS__CLIENT_S3_BUCKET, ""}
        retain: false
      params:
        maxRetries: 5
      object:
        '**/*/stats.json':
          exclude: true
        '*':
          params:
            ACL: 'public-read'
            cacheControl: 'public, immutable, max-age=31536000'
    'webpack/server.config.js':
      params:
        maxRetries: 5
      bucket:
        name: ${env:SERVERLESS__SITE_S3_BUCKET, ""}
        retain: false
      object:
        '**/*.js':
          exclude: true
        '**/*.html':
          params:
            ACL: 'public-read'
            cacheControl: 'no-cache, must-revalidate, max-age=0'
