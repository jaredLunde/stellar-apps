# NOTE:
# All variables are here:
# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: <:ROOT_NAME:>-<:PKG_NAME:>

resources:
  Resources:
    # Creates a static site bucket named after the domain name
    StaticSiteS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.certificateManager.name}
        WebsiteConfiguration:
          IndexDocument: index.html
    # Creates a bucket policy for the static site bucket
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSiteS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: ["", ["arn:aws:s3:::", {"Ref": "StaticSiteS3Bucket"}, "/*"]]
    # Sets up the CloudFront custom certificate
    StaticSiteCert:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.siteName}
        DomainValidationOptions:
          - DomainName: ${self:custom.siteName}
            ValidationDomain: ${self:custom.siteName}
      # Sets up the CloudFront distribution
      CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
          DistributionConfig:
            Origins:
              - DomainName:
                  Fn::GetAtt:
                    - StaticSite
                    - DomainName
                # It isn't necessary to sue this value; but we need the same
                # value for DefaultCacheBehavior.TargetOriginId
                Id:
                  Ref: StaticSite
                CustomOriginConfig:
                  HTTPPort: 80
                  HTTPSPort: 443
                  OriginProtocolPolicy: https-only
            Enabled: 'true'
            Aliases:
              - ${self:custom.siteName}
            DefaultRootObject: index.html
            CustomErrorResponses:
              - ErrorCode: 404
                ResponseCode: 200
                ResponsePagePath: /index.html
            DefaultCacheBehavior:
              AllowedMethods:
                - GET
                - HEAD
              TargetOriginId:
                Ref: StaticSite
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
            ViewerCertificate:
              AcmCertificateArn:
                Ref: StaticSiteCert
              SslSupportMethod: sni-only
        DependsOn:
          - StaticSiteS3BucketPolicy
    # Sets up Route 53 for the S3 static site
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.siteName}.
        Name: ${self:custom.siteName}.
        Type: 'A'
# TODO: https://github.com/ServerlessOpsIO/serverless-zombo.com/blob/master/serverless.yml

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'production'}
  # AWS profile to use when deploying
  profile: ${env:SERVERLESS__PROFILE}
  # AWS region to deploy into
  region: us-east-1
  # Optional function versioning
  versionFunctions: false
  # Set the default RetentionInDays for a CloudWatch LogGroup
  logRetentionInDays: 7
  deploymentBucket:
    # Deployment bucket name. Default is generated by the framework
    name: stellar-serverless-deploys
    serverSideEncryption: AES256
  # The S3 prefix under which deployed artifacts should be stored
  deploymentPrefix: artifacts
  # Use a custom name for the API Gateway API
  apiName: ${self:service}-${self:provider.stage}
  apiGateway:
    # Compress response when larger than specified size in bytes (must be between 0 and 10485760)
    minimumCompressionSize: 2048
  # Optional endpoint configuration for API Gateway REST API. Other option is 'edge'
  endpointType: regional
  # IAM role statements so that services can be accessed in the AWS account
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cloudformation:DescribeStackResource"
      Resource: "*"

plugins:
  # Loads environment variables defined in .env.[--stage]
  - '@stellar-apps/serverless-dotenv'
  # Creates ACM certificates for the app domains
  - '@stellar-apps/serverless-certificate-manager'
  # Runs the static site webpack bundler
  - serverless-plugin-scripts
  # Deploys Webpack bundles to S3
  - '@stellar-apps/serverless-sync-bundle'

custom:
  # Environment variables
  dotenv:
    exclude:
      - 'SERVERLESS__*'
  # Creates ACM certificates for the app domains
  certificateManager:
    name: <:DOMAIN_PRODUCTION:>
    domains:
      - <:DOMAIN_PRODUCTION:>
      - '*.<:DOMAIN_PRODUCTION:>'
  # Defines settings for client-side bundle objects and the S3 bucket
  syncBundle:
    'webpack/client.config.js':
      bucket:
        name: ${env:SERVERLESS__S3_BUCKET}
        retain: true
      params:
        maxRetries: 5
      object:
        '*':
          key: '[filename]'
          params:
            ACL: 'public-read'
            cacheControl: 'public, immutable, max-age=31536000'
    'webpack/server.config.js':
      params:
        maxRetries: 5
      bucket:
        name: <:DOMAIN_PRODUCTION:>
        retain: false
      object:
        '**/*.js':
          exclude: true
        '**/*.html':
          key: '[filename]'
          params:
            ACL: 'public-read'
            cacheControl: 'no-cache, must-revalidate, max-age=0'
