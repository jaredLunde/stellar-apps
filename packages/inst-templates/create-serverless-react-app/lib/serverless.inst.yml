# NOTE:
# All variables are here:
# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: <:ROOT_NAME:>-<:PKG_NAME:>

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'staging'}
  # AWS profile to use when deploying
  profile: ${env:SERVERLESS__PROFILE}
  # AWS region to deploy into
  region: us-east-1
  # Optional function versioning
  versionFunctions: false
  # Set the default RetentionInDays for a CloudWatch LogGroup
  logRetentionInDays: 7
  deploymentBucket:
    # Deployment bucket name. Default is generated by the framework
    name: stellar-serverless-deploys
    serverSideEncryption: AES256
  # The S3 prefix under which deployed artifacts should be stored
  deploymentPrefix: artifacts
  # Use a custom name for the API Gateway API
  apiName: ${self:service}-${self:provider.stage}
  apiGateway:
    # Compress response when larger than specified size in bytes (must be between 0 and 10485760)
    minimumCompressionSize: 2048
  # Optional endpoint configuration for API Gateway REST API. Other option is 'edge'
  endpointType: regional
  # IAM role statements so that services can be accessed in the AWS account
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cloudformation:DescribeStackResource"
      Resource: "*"

functions:
  app:
    # The file and module for this specific function.
    handler: render.main
    # memorySize for this specific function
    memorySize: ${env:SERVERLESS__MEMORY_SIZE}
    # Timeout for this specific function
    timeout: 12
    # The Events that trigger this Function
    events:
      - http: GET /
      - http: 'GET {proxy+}'
    # Optional deployment packaging configuration
    package:
      # Specify the directories and files which should be included in the deployment package
      include:
        - dist/server/*
        - package.json
    # For serverless-plugin-lambda-warmup. If 'false' this function will not stay warm.
    warmup: true
    # Function level environment variables
    environment:
      STAGE: ${self:provider.stage}
    # Function specific tags
    tags:
      STAGE: ${self:provider.stage}

plugins:
  # Loads environment variables defined in .env.[--stage]
  - '@stellar-apps/serverless-dotenv'
  # Creates ACM certificates for the app domains
  - '@stellar-apps/serverless-certificate-manager'
  # Creates the domain record in Route 53 and provides custom domain names
  - serverless-domain-manager
  - serverless-plugin-scripts
  # Allows API gateway to gzip
  - serverless-apigw-binary
  # Deploys the client-side bundle to S3
  - '@stellar-apps/serverless-deploy-client-bundle'
  # Packages the server-side bundle
  - serverless-webpack
  # Prevents cold starts
  - serverless-plugin-lambda-warmup

custom:
  # Environment variables
  dotenv:
    exclude:
      - 'SERVERLESS__*'
  # Creates ACM certificates for the app domains
  certificateManager:
    name: <:DOMAIN_PRODUCTION:>
    domains:
      - <:DOMAIN_PRODUCTION:>
      - <:DOMAIN_STAGING:>
      - '*.<:DOMAIN_PRODUCTION:>'
  # Sets up the domain name in Route 53 an attaches API Gateway to the certificate
  customDomain:
    domainName: ${env:CONFIG__DOMAIN}
    stage: ${self:provider.stage}
    basePath: ''
    createRoute53Record: true
    certificateName: ${self:custom.certificateManager.name}
    endpointType: regional
  # Automatically creates the domain name on complete deployments
  scripts:
    hooks:
       'after:package:finalize': sls create_domain --stage ${self:provider.stage}
  # Sets up binary media types in API Gateway -> Settings
  apigwBinary:
    types:
      - 'application/json'
      - 'text/html'
      - 'text/plain'
  # prevents cold starts
  warmup:
    schedule: 'rate(5 minutes)'
    stages:
      - production
  # Server bundle creation
  webpack:
    webpackConfig: 'webpack/server.config.js'
    includeModules: true
    packager: 'yarn'
    packagerOptions:
      noFrozenLockFile: true
  # Defines settings for client-side bundle objects and the S3 bucket
  deployClientBundle:
    webpack:
      config: 'webpack/client.config.js'
    s3:
      params:
        maxRetries: 5
      bucket:
        name: ${env:SERVERLESS__S3_BUCKET}
        params:
          ACL: 'private'
        corsRules:
          - allowedOrigins:
              - ${env:CONFIG__DOMAIN}
            allowedHeaders:
              - '*'
            allowedMethods:
              - GET
            maxAgeSeconds: 86400
      object:
        '*':
          key: '[filename]'
          params:
            ACL: 'public-read'
            cacheControl: 'public, immutable, max-age=31536000'