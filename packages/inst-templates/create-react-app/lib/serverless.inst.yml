# NOTE:
# All variables are here:
# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/
service: <:ROOT_NAME:>-<:PKG_NAME:>

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'staging'}
  # AWS profile to use when deploying
  profile: ${env:SERVERLESS__PROFILE}
  # AWS region to deploy into
  region: us-east-1
  # Optional function versioning
  versionFunctions: false
  # Set the default RetentionInDays for a CloudWatch LogGroup
  logRetentionInDays: 7
  deploymentBucket:
    # Deployment bucket name. Default is generated by the framework
    name: stellar-serverless-deploys
    serverSideEncryption: AES256
  # The S3 prefix under which deployed artifacts should be stored
  deploymentPrefix: artifacts
  # Use a custom name for the API Gateway API
  apiName: ${self:service}-${self:provider.stage}
  apiGateway:
    # Compress response when larger than specified size in bytes (must be between 0 and 10485760)
    minimumCompressionSize: 2048
  # Optional endpoint configuration for API Gateway REST API. Other option is 'edge'
  endpointType: ${env:SERVERLESS__ENDPOINT_TYPE}
  # IAM role statements so that services can be accessed in the AWS account
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cloudformation:DescribeStackResource"
      Resource: "*"

resources:
  Resources:
    # Creates a bucket for public assets
    # DELETE if using a shared or existing bucket
    ClientS3Bucket:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      Properties:
        # The bucket itself should be private by default for security, objects can
        # optionally be defined as public
        AccessControl: Private
        BucketName: ${self:custom.S3Bucket}
        CorsConfiguration:
          CorsRules:
            # By default, this only allows the static site's domain as an origin. You can
            # add more allowed origins to your leisure.
            - AllowedOrigins:
                - ${self:custom.domain}
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
    # Redirects WWW to naked domain
    # StaticRedirectS3Bucket:
    #   Type: AWS::S3::Bucket
    #   # DeletionPolicy: Retain
    #   Properties:
    #     AccessControl: PublicRead
    #     BucketName: www.${self:custom.domain}
    #     WebsiteConfiguration:
    #       RedirectAllRequestsTo:
    #         Protocol: https
    #         HostName: ${self:custom.domain}
    # DNS record for apex redirect
    # StaticRedirectDnsRecord:
    #   Type: AWS::Route53::RecordSet
    #   DependsOn:
    #     - StaticRedirectS3Bucket
    #   Properties:
    #     AliasTarget:
    #       # These two values differ regionally, so make sure your values match your region
    #       # See here: https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints
    #       DNSName: s3-website-us-east-1.amazonaws.com. # us-east-1
    #       HostedZoneId: Z3AQBSTGFYJSTF                 # us-east-1
    #     HostedZoneName: ${self:custom.hostedZone}
    #     Name:
    #       Ref: StaticRedirectS3Bucket
    #     Type: 'A'

functions:
  main:
    # The file and module for this specific function.
    handler: render.main
    # memorySize for this specific function
    memorySize: ${env:SERVERLESS__MEMORY_SIZE}
    # Timeout for this specific function
    timeout: 12
    # The Events that trigger this Function
    events:
      - http: GET /
      - http: 'GET {proxy+}'
    # Optional deployment packaging configuration
    package:
      # Specify the directories and files which should be included in the deployment package
      include:
        - dist/server/*
        - package.json
    # For serverless-plugin-lambda-warmup. If 'false' this function will not stay warm.
    warmup: true
    # Function level environment variables
    environment:
      STAGE: ${self:provider.stage}
    # Function specific tags
    tags:
      STAGE: ${self:provider.stage}

plugins:
  # Loads environment variables defined in .env.[--stage]
  - '@stellar-apps/serverless-dotenv'
  # Creates ACM certificates for the app domains
  - '@stellar-apps/serverless-certificate-manager'
  # Creates the domain record in Route 53 and provides custom domain names
  - serverless-domain-manager
  - serverless-plugin-scripts
  # Allows API gateway to gzip
  - serverless-apigw-binary
  # Deploys the client-side bundle to S3
  # This must be executed before `serverless-webpack` because the server code relies on it
  - '@stellar-apps/serverless-sync-bundle'
  # Packages the server-side bundle
  - serverless-webpack
  # Prevents cold starts
  - serverless-plugin-lambda-warmup

custom:
  # Defines the domain name being created in this template
  domain: ${env:DOMAIN}
  # Defines the S3 bucket for client resources: images, js, json, etc.
  S3Bucket: ${env:SERVERLESS__S3_BUCKET, ""}
  # The hosted zone in Route 53 where the domain records reside
  hostedZone: ${env:SERVERLESS__HOSTED_ZONE, ""}
  # Environment variables attached to each function
  dotenv:
    exclude:
      - 'SERVERLESS__*'
  # Creates ACM certificates for the app domains
  certificateManager:
    # Make `false` to delete this certificate on teardown
    # This is `true` by default to avoid accidentally deleting a shared certificate
    - retain: true
      domains:
        - <:DOMAIN_PRODUCTION:>
        - <:(value+=props.DOMAIN_PRODUCTION.split('.').length === 2 ? `'*.${props.DOMAIN_PRODUCTION}'`: props.DOMAIN_STAGING):>
  # Sets up the domain name in Route 53 an attaches API Gateway to the certificate
  customDomain:
    domainName: ${self:custom.domain}
    stage: ${self:provider.stage}
    basePath: ''
    createRoute53Record: true
    endpointType: ${self:provider.endpointType}
    # certificateName: ${self:custom.domain}
  scripts:
    hooks:
      # Creates the domain name on complete deployments
      'after:package:finalize': sls create_domain --stage ${self:provider.stage}
      # Deletes the domain on teardown
      'before:remove:remove': sls delete_domain --stage ${self:provider.stage}
  # Sets up binary media types in API Gateway -> Settings
  apigwBinary:
    types:
      - 'application/json'
      - 'text/html'
      - 'text/plain'
  # Prevents cold starts
  warmup:
    schedule: 'rate(5 minutes)'
    stages:
      # only warms functions when in the production stage
      - production
  # Server bundle creation
  webpack:
    webpackConfig: 'webpack/server.config.js'
    includeModules: true
    packager: 'yarn'
    packagerOptions:
      noFrozenLockFile: true
  # Defines settings for the application bundles
  syncBundle:
    # Client-side bundle for JS, images, etc.
    'webpack/client.config.js':
      bucket:
        # The name of the bucket where the client code will be deployed
        name: ${self:custom.S3Bucket}
        # Make `false` to empty this bucket on teardown
        # This is `true` by default to avoid accidentally nuking a shared bucket
        retain: true
      # Parameters passed to the AWS.S3() constructor in aws-sdk
      params:
        maxRetries: 5
      object:
        # Excludes the stats file generated with Webpack from being synced
        'stats.json':
          exclude: true
        '*':
          params:
            ACL: 'public-read'
            # Files should have hashes in their filenames based upon their content
            # and therefore be immutable, making them safe to cache indefinitely
            cacheControl: 'public, immutable, max-age=31536000'