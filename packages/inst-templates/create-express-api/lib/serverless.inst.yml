service: <: ROOT_NAME :>-<: PKG_NAME :>

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'development'}
  # AWS profile to use when deploying
  profile: ${env:SERVERLESS__PROFILE}
  # AWS region to deploy into
  region: us-east-1
  # Optional function versioning
  versionFunctions: false
  # Set the default RetentionInDays for a CloudWatch LogGroup
  logRetentionInDays: 7
  deploymentBucket:
    # Deployment bucket name. Default is generated by the framework
    name: stellar-serverless-deploys
    serverSideEncryption: AES256
  # The S3 prefix under which deployed artifacts should be stored
  deploymentPrefix: artifacts
  # Use a custom name for the API Gateway API
  apiName: ${self:service}-${self:provider.stage}
  apiGateway:
    # Compress response when larger than specified size in bytes (must be between 0 and 10485760)
    minimumCompressionSize: 2048
  # Optional endpoint configuration for API Gateway REST API. Other option is 'edge'
  endpointType: ${env:SERVERLESS__ENDPOINT_TYPE}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cloudformation:DescribeStackResource"
      Resource: "*"
    # Allows the Serverless role to access SSM parameters for things like DB and API keys
    - Effect: "Allow"
      Action:
        - "ssm:GetParameters"
        - "ssm:GetParametersByPath"
        - "ssm:DescribeParameters"
      # Can optionally restrict individual parameter paths
      # Resource: "arn:aws:ssm:us-east-1:<id>:parameter/*"
      Resource: "*"
    # Allows the Serverless role to invoke lambda functions
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"

plugins:
  - serverless-pseudo-parameters
  # Loads environment variables defined in .env.[--stage]
  - '@stellar-apps/serverless-dotenv'
  # Creates ACM certificates for the app domains
  - '@stellar-apps/serverless-certificate-manager'
  # Allows custom scripts to be executed on Serverless Lifecycle Hooks
  - serverless-plugin-scripts
  # Creates the domain record in Route 53 and provides custom domain names
  - serverless-domain-manager
  # Allows API gateway to gzip
  - serverless-apigw-binary
  # Packages the API bundle
  - serverless-webpack
  # Prevents cold starts
  - serverless-plugin-lambda-warmup
  # Allows for local testing of the API in an environment similar to API Gateway + Lambda
  - serverless-offline

functions:
  main:
    # The file and module for this specific function.
    handler: handler.main
    # memorySize for this specific function
    memorySize: ${env:SERVERLESS__MEMORY_SIZE}
    # Timeout for this specific function
    timeout: 12
    # Configures API Gateway to accept all incoming requests
    events:
      - http: ANY /
      - http: ANY /{proxy+}
    # Function level environment variables
    environment:
      STAGE: ${self:provider.stage}
      SSM_CONFIG: ${self:custom.ssmConfig}
    # Function specific tags
    tags:
      STAGE: ${self:provider.stage}

custom:
  # Defines the domain name being created in this template
  domain: ${env:DOMAIN}
  # The hosted zone in Route 53 where the domain records reside
  hostedZone: ${env:SERVERLESS__HOSTED_ZONE, ""}
  # Configuration path for SSM if using
  ssmConfig: ${env:SERVERLESS__SSM_CONFIG_PATH}
  # Environment variables attached to each function
  dotenv:
    exclude:
      - 'SERVERLESS__*'
  # Local offline development settings
  serverless-offline:
    host: ${opt:host, '127.0.0.1'}
    port: ${opt:port, '4000'}
  # Creates ACM certificates for the app domains
  certificateManager:
    # Make `false` to delete this certificate on teardown
    # This is `true` by default to avoid accidentally deleting a shared certificate
    - retain: true
      domains:
        - <:DOMAIN_PRODUCTION:>
        - <:(value+=props.DOMAIN_PRODUCTION.split('.').length === 2 ? `'*.${props.DOMAIN_PRODUCTION}'`: props.DOMAIN_STAGING):>
  scripts:
    hooks:
      # Creates the domain name on complete deployments
      'after:package:finalize': sls create_domain --stage ${self:provider.stage}
      # Deletes the domain on teardown
      'before:remove:remove': sls delete_domain --stage ${self:provider.stage}
  # Sets up the domain name in Route 53 an attaches API Gateway to the certificate
  customDomain:
    domainName: ${self:custom.domain}
    stage: ${self:provider.stage}
    basePath: ''
    createRoute53Record: true
    endpointType: ${self:provider.endpointType}
  # Sets up binary media types in API Gateway -> Settings
  apigwBinary:
    types:
      - 'application/json'
      - 'text/html'
      - 'text/plain'
  # Prevents cold starts in production
  warmup:
    schedule: 'rate(5 minutes)'
    stages:
      # only warms functions when in the production stage
      - production
  # Bundles the API
  webpack:
    webpackConfig: 'webpack/config.js'
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'yarn'
    packagerOptions:
      noFrozenLockFile: true
